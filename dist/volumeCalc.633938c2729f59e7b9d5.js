!function(e){function t(t){for(var n,l,o=t[0],s=t[1],c=t[2],d=0,m=[];d<o.length;d++)l=o[d],Object.prototype.hasOwnProperty.call(a,l)&&a[l]&&m.push(a[l][0]),a[l]=0;for(n in s)Object.prototype.hasOwnProperty.call(s,n)&&(e[n]=s[n]);for(u&&u(t);m.length;)m.shift()();return i.push.apply(i,c||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],n=!0,o=1;o<r.length;o++){var s=r[o];0!==a[s]&&(n=!1)}n&&(i.splice(t--,1),e=l(l.s=r[0]))}return e}var n={},a={1:0},i=[];function l(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,l),r.l=!0,r.exports}l.m=e,l.c=n,l.d=function(e,t,r){l.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(e,t){if(1&t&&(e=l(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(l.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)l.d(r,n,function(t){return e[t]}.bind(null,n));return r},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="";var o=window.webpackJsonp=window.webpackJsonp||[],s=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var u=s;i.push([7,0]),r()}({6:function(e,t,r){},7:function(e,t,r){"use strict";r.r(t);r(6);var n=r(0),a=r(1);let i={textures:[{image:"brick-texture.jpg",price:150},{image:"coswick-oak-natural.jpg",price:30},{image:"tile.jpg",price:48},{image:"crossed-out.png",price:0}]};let l=new class{constructor(){this.materialsArea={areas:[]}}getFaceArea(e,t){let r=e.a,a=t.geometry.vertices[r],i=e.b,l=t.geometry.vertices[i],o=e.c,s=t.geometry.vertices[o],c=new n.Triangle(a,l,s);return Math.floor(1e3*c.getArea())/1e3}createPolygonByFace(e,t){let r=e.a,a=t.geometry.vertices[r],i=e.b,l=t.geometry.vertices[i],o=e.c,s=t.geometry.vertices[o],c=new n.Geometry;return c.vertices.push(a,l,s),c.faces.push(new n.Face3(0,1,2)),c}getMaterialsArea(e,t){let r=[],n=this.getFacesInfo(t,e);for(let e of i.textures)if("crossed-out.png"!==e.image){let t=n.filter(t=>t.image===e.image).reduce((e,t)=>e+Math.floor(1e3*t.area)/1e3,0);r.push({image:e.image,area:t})}return r}getFacesInfo(e,t){let r=t.map((function(e){let t;return e&&(t=e.userData),t}));return e.geometry.faces.map((function(t){let n={};return n.materialIndex=t.materialIndex,n.area=l.getFaceArea(t,e),n.image=r[t.materialIndex],n}))}fillTable(e){e.areas.length,e.areas.forEach(e=>{let t=document.getElementById(e.image),r=Math.trunc(1e3*e.area)/1e3;t.innerHTML=r;let n=document.getElementById("cost-"+e.image),a=i.textures.filter(t=>t.image===e.image);n.innerHTML=Math.trunc(+r*a[0].price*1e3)/1e3})}},o={},s=new n.Scene;s.background=new n.Color("#bdd0e9");let c=new n.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3),u=new n.WebGLRenderer;u.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(u.domElement);let d=new a.a(c,u.domElement),m=new n.Raycaster,g=[],p={img:""};window.addEventListener("resize",(function(){c.aspect=window.innerWidth/window.innerHeight,c.updateProjectionMatrix(),u.setSize(window.innerWidth,window.innerHeight)}),!1),document.addEventListener("mousedown",(function(e){let t=L(e);m.setFromCamera(t,c);let r=m.intersectObjects(g);if(r.length>0){let e=r[0].face.materialIndex;if(p.img){let t,r=p.img.split("/").pop();"crossed-out.png"!==r?(t=(new n.TextureLoader).load(p.img),f[e]=new n.MeshBasicMaterial({map:t}),f[e].userData=r):(f[e]=new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),f[e].userData={}),l.materialsArea.areas=l.getMaterialsArea(f,b),l.fillTable(l.materialsArea)}}}),!1),document.addEventListener("touchstart",(function(e){let t=L(e.touches[0]);m.setFromCamera(t,c);let r=m.intersectObjects(g);if(r.length>0){let e=r[0].face.materialIndex;if(p.img){let t,r=p.img.split("/").pop();"crossed-out.png"!==r?(t=(new n.TextureLoader).load(p.img),f[e]=new n.MeshBasicMaterial({map:t}),f[e].userData=r):(f[e]=new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),f[e].userData={}),l.materialsArea.areas=l.getMaterialsArea(f,b),l.fillTable(l.materialsArea)}}}),!1);let w=new n.BoxGeometry(5,5,5,1,1,1),f=[new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),new n.MeshBasicMaterial({color:new n.Color("lightgrey")})],b=new n.Mesh(w,f);s.add(b),g.push(b);let h=new n.AxesHelper(5);s.add(h);let y=new n.EdgesGeometry(b.geometry);var v=new n.LineSegments(y,new n.LineBasicMaterial({color:16777215}));v.name="wire",b.add(v),c.position.z=5,c.position.x=10,c.position.y=8,d.update(),o.scene=s,o.cube=b,o.currentTexture=p,o.materials=f;let M=function(){requestAnimationFrame(M),d.update(),u.render(s,c)};function L(e){return(new n.Vector2).set(e.clientX/window.innerWidth*2-1,-e.clientY/window.innerHeight*2+1)}M();var x=r(2),T=r(3),C=r(4),B=r(5);let E=J(document.body,"div","leftMenu");J(E,"div","title").innerHTML="Калькулятор объемов";let O=J(E,"div","formInput"),A=J(O,"div","inputDiv");J(A,"label","labelClass").innerHTML="Ширина";let H=J(A,"input","inputClass");H.type="number",H.value=5,H.min=0,H.step=.1,A=J(O,"div","inputDiv"),J(A,"label","labelClass").innerHTML="Высота";let j=J(A,"input","inputClass");j.type="number",j.value=5,j.min=0,j.step=.1,A=J(O,"div","inputDiv"),J(A,"label","labelClass").innerHTML="Глубина";let S=J(A,"input","inputClass");S.type="number",S.value=5,S.min=0,S.step=.1,J(E,"label","labelClass").innerHTML="Расчеты";let k=J(E,"div","divCalculations"),I=J(k,"table","tableClass"),P=J(I,"tr","tdClass"),F=J(P,"th","thClass");F.innerHTML="Материал",F=J(P,"th","thClass"),F.innerHTML="Площадь",F=J(P,"th","thClass"),F.innerHTML="Стоимость",i.textures.forEach(e=>{if("crossed-out.png"!==e.image){let t=J(I,"tr","tdClass"),r=J(t,"td","tdClass");J(r,"img","imgTable").src=e.image;let n=J(t,"td","tdClass");n.id=e.image,n.innerHTML=0;let a=J(t,"td","tdClass");a.id="cost-"+e.image,a.innerHTML=0}}),j.addEventListener("input",e=>{let t=j.value;t<.001&&(t=.001),N("height",t,o.cube),l.materialsArea.areas=l.getMaterialsArea(o.materials,o.cube),l.fillTable(l.materialsArea)}),H.addEventListener("input",e=>{let t=H.value;t<.001&&(t=.001),N("width",t,o.cube),l.materialsArea.areas=l.getMaterialsArea(o.materials,o.cube),l.fillTable(l.materialsArea)}),S.addEventListener("input",e=>{let t=S.value;t<.001&&(t=.001),N("depth",t,o.cube),l.materialsArea.areas=l.getMaterialsArea(o.materials,o.cube),l.fillTable(l.materialsArea)});let D=J(E,"div","exportButtonDiv"),R=J(D,"button","exportButton");R.innerHTML="glTF",R.addEventListener("click",(function(){(new x.a).parse(o.scene,(function(e){let t=JSON.stringify(e,null,2);U(new Blob([t],{type:"text/plain"}),"Scene","gltf")}))}));let W=J(D,"button","exportButton");W.innerHTML="STL",W.addEventListener("click",(function(){let e=(new T.a).parse(o.scene,{binary:!0});U(new Blob([e],{type:"application/octet-stream"}),"Scene","stl")}));let _=J(D,"button","exportButton");_.innerHTML="EOBJ",_.addEventListener("click",(function(){let e=(new C.a).parse(o.scene);U(new Blob([e],{type:"text/plain"}),"Scene","obj")}));let G=J(D,"button","exportButton");G.innerHTML="PLY",G.addEventListener("click",(function(){(new B.a).parse(o.scene,(function(e){U(new Blob([e],{type:"text/plain"}),"Scene","ply")}))}));let z=J(E,"div","textureSelect");function J(e,t,r){let n=document.createElement(t);return n.className=r,e.appendChild(n),n}function U(e,t,r){let n=t+"."+r,a=document.createElement("a");a.download=n,window.navigator&&window.navigator.msSaveOrOpenBlob?window.navigator.msSaveOrOpenBlob(e,n):(a.href=URL.createObjectURL(e),a.click(),URL.revokeObjectURL(a.href))}function N(e,t,r){let a=r.geometry,i={};Object.assign(i,a.parameters),i[e]=t;let l=function(e,t){let r=new n[e],a=Object.values(t);return r=new n[e](...a),r}(r.geometry.type,i);r.geometry.dispose(),r.geometry=l;let o=r.getObjectByName("wire");o.geometry.dispose(),o.geometry=new n.EdgesGeometry(r.geometry)}i.textures.forEach(e=>{let t=J(z,"img","imgClass");t.src=e.image,t.addEventListener("click",()=>{o.currentTexture.img=t.src;let e=document.getElementById("selectedTexture");e&&(e.style.borderColor="black",e.id="deselectedTexture"),t.style.borderColor="rgb(220, 20, 60)",t.id="selectedTexture"})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,