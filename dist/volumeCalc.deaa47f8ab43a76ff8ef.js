!function(e){function t(t){for(var n,l,o=t[0],s=t[1],c=t[2],d=0,p=[];d<o.length;d++)l=o[d],Object.prototype.hasOwnProperty.call(a,l)&&a[l]&&p.push(a[l][0]),a[l]=0;for(n in s)Object.prototype.hasOwnProperty.call(s,n)&&(e[n]=s[n]);for(u&&u(t);p.length;)p.shift()();return i.push.apply(i,c||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],n=!0,o=1;o<r.length;o++){var s=r[o];0!==a[s]&&(n=!1)}n&&(i.splice(t--,1),e=l(l.s=r[0]))}return e}var n={},a={1:0},i=[];function l(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,l),r.l=!0,r.exports}l.m=e,l.c=n,l.d=function(e,t,r){l.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(e,t){if(1&t&&(e=l(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(l.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)l.d(r,n,function(t){return e[t]}.bind(null,n));return r},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="";var o=window.webpackJsonp=window.webpackJsonp||[],s=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var u=s;i.push([7,0]),r()}({6:function(e,t,r){},7:function(e,t,r){"use strict";r.r(t);r(6);var n=r(0),a=r(1);let i={textures:[{image:"./Data/brick-texture.jpg",price:150},{image:"./Data/coswick-oak-natural.jpg",price:30},{image:"./Data/vintage-texture.jpg",price:52},{image:"./Data/crossed-out.png",price:0}]};let l,o,s,c,u=new class{constructor(){this.materialsArea={areas:[]}}getFaceArea(e,t){let r=e.a,a=t.vertices[r],i=e.b,l=t.vertices[i],o=e.c,s=t.vertices[o],c=new n.Triangle(a,l,s);return Math.floor(1e3*c.getArea())/1e3}createPolygonByFace(e,t){let r=e.a,a=t.geometry.vertices[r],i=e.b,l=t.geometry.vertices[i],o=e.c,s=t.geometry.vertices[o],c=new n.Geometry;return c.vertices.push(a,l,s),c.faces.push(new n.Face3(0,1,2)),c}getMaterialsArea(e,t){let r=[],n=this.getFacesInfo(t,e);for(let e of i.textures)if(0!==e.price){let t=e.image;t=t.replace("./Data/","");let a=n.filter(e=>e.image===t).reduce((e,t)=>e+Math.floor(1e3*t.area)/1e3,0);r.push({image:e.image,area:a})}return r}getFacesInfo(e,t){let r=t.map((function(e){let t;return e&&(t=e.userData),t})),a=new n.Geometry;return a=a.fromBufferGeometry(e.clone().geometry),a.faces.map((function(e){let t={};return t.materialIndex=e.materialIndex,t.area=u.getFaceArea(e,a),t.image=r[e.materialIndex],t}))}fillTable(e){e.areas.length,e.areas.forEach(e=>{let t=e.image,r=document.getElementById(t),n=Math.trunc(1e3*e.area)/1e3;r.innerHTML=n;let a=document.getElementById("cost-"+t),l=i.textures.filter(t=>t.image===e.image);a.innerHTML=Math.trunc(+n*l[0].price*1e3)/1e3})}},d={};function p(e){return(new n.Vector2).set(e.clientX/window.innerWidth*2-1,-e.clientY/window.innerHeight*2+1)}!async function(){s=new n.Scene,s.background=new n.Color("#bdd0e9"),c=new n.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3),o=new n.WebGLRenderer({antialias:!0}),o.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(o.domElement),l=new a.a(c,o.domElement);let e=new n.Raycaster,t=[],r={img:""};window.addEventListener("resize",(function(){c.aspect=window.innerWidth/window.innerHeight,c.updateProjectionMatrix(),o.setSize(window.innerWidth,window.innerHeight)}),!1),document.addEventListener("mousedown",(function(a){let i=p(a);e.setFromCamera(i,c);let l=e.intersectObjects(t);if(l.length>0){let e=l[0].face.materialIndex;if(r.img){let t=r.img.split("/").pop();if("crossed-out.png"!==t){let r=f.filter(e=>e.image.currentSrc.split("/").pop()===t);l[0].object.material[e]=new n.MeshBasicMaterial({map:r[0]}),w[e].userData=t}else w[e]=new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),w[e].userData={};u.materialsArea.areas=u.getMaterialsArea(w,b),u.fillTable(u.materialsArea)}}}),!1),document.addEventListener("touchstart",(function(a){let i=p(a.touches[0]);e.setFromCamera(i,c);let l=e.intersectObjects(t);if(l.length>0){let e=l[0].face.materialIndex;if(r.img){let t=r.img.split("/").pop();if("crossed-out.png"!==t){let r=f.filter(e=>e.image.currentSrc.split("/").pop()===t);l[0].object.material[e]=new n.MeshBasicMaterial({map:r[0]}),w[e].userData=t}else w[e]=new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),w[e].userData={};u.materialsArea.areas=u.getMaterialsArea(w,b),u.fillTable(u.materialsArea)}}}),!1);let m=new n.BoxBufferGeometry(5,5,5,1,1,1),g=new n.TextureLoader,f=await Promise.all(i.textures.map(e=>g.loadAsync(e.image))),w=[new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),new n.MeshBasicMaterial({color:new n.Color("lightgrey")}),new n.MeshBasicMaterial({color:new n.Color("lightgrey")})],b=new n.Mesh(m,w);s.add(b),t.push(b);let h=new n.AxesHelper(5);s.add(h);let y=new n.EdgesGeometry(b.geometry);var v=new n.LineSegments(y,new n.LineBasicMaterial({color:16777215}));v.name="wire",b.add(v),c.position.z=5,c.position.x=10,c.position.y=8,l.update(),d.scene=s,d.cube=b,d.currentTexture=r,d.materials=w}(),function e(){requestAnimationFrame(e),l.update(),o.render(s,c)}();var m=r(2),g=r(3),f=r(4),w=r(5);let b=k(document.body,"div","leftMenu");k(b,"div","title").innerHTML="Калькулятор объемов";let h=k(b,"div","formInput"),y=k(h,"div","inputDiv");k(y,"label","labelClass").innerHTML="Ширина";let v=k(y,"input","inputClass");v.type="number",v.value=5,v.min=0,v.step=.1,y=k(h,"div","inputDiv"),k(y,"label","labelClass").innerHTML="Высота";let M=k(y,"input","inputClass");M.type="number",M.value=5,M.min=0,M.step=.1,y=k(h,"div","inputDiv"),k(y,"label","labelClass").innerHTML="Глубина";let L=k(y,"input","inputClass");L.type="number",L.value=5,L.min=0,L.step=.1,k(b,"label","labelClass").innerHTML="Расчеты";let x=k(b,"div","divCalculations"),C=k(x,"table","tableClass"),T=k(C,"tr","tdClass"),B=k(T,"th","thClass");B.innerHTML="Материал",B=k(T,"th","thClass"),B.innerHTML="Площадь",B=k(T,"th","thClass"),B.innerHTML="Стоимость",i.textures.forEach(e=>{let t=e.image;if(0!==e.price){let r=k(C,"tr","tdClass"),n=k(r,"td","tdClass");k(n,"img","imgTable").src=e.image;let a=k(r,"td","tdClass");a.id=t,a.innerHTML=0;let i=k(r,"td","tdClass");i.id="cost-"+t,i.innerHTML=0}}),M.addEventListener("input",e=>{let t=M.value;t<.001&&(t=.001),P("height",t,d.cube),u.materialsArea.areas=u.getMaterialsArea(d.materials,d.cube),u.fillTable(u.materialsArea)}),v.addEventListener("input",e=>{let t=v.value;t<.001&&(t=.001),P("width",t,d.cube),u.materialsArea.areas=u.getMaterialsArea(d.materials,d.cube),u.fillTable(u.materialsArea)}),L.addEventListener("input",e=>{let t=L.value;t<.001&&(t=.001),P("depth",t,d.cube),u.materialsArea.areas=u.getMaterialsArea(d.materials,d.cube),u.fillTable(u.materialsArea)});let E=k(b,"div","exportButtonDiv"),j=k(E,"button","exportButton");j.innerHTML="glTF",j.addEventListener("click",(function(){(new m.a).parse(d.scene,(function(e){D(new Blob([e],{type:"application/octet-stream"}),"Scene","glb")}),{binary:!0})}));let A=k(E,"button","exportButton");A.innerHTML="STL",A.addEventListener("click",(function(){let e=(new g.a).parse(d.scene,{binary:!0});D(new Blob([e],{type:"application/octet-stream"}),"Scene","stl")}));let O=k(E,"button","exportButton");O.innerHTML="EOBJ",O.addEventListener("click",(function(){let e=(new f.a).parse(d.scene);D(new Blob([e],{type:"text/plain"}),"Scene","obj")}));let H=k(E,"button","exportButton");H.innerHTML="PLY",H.addEventListener("click",(function(){(new w.a).parse(d.scene,(function(e){D(new Blob([e],{type:"text/plain"}),"Scene","ply")}))}));let S=k(b,"div","textureSelect");function k(e,t,r){let n=document.createElement(t);return n.className=r,e.appendChild(n),n}function D(e,t,r){let n=t+"."+r,a=document.createElement("a");a.download=n,window.navigator&&window.navigator.msSaveOrOpenBlob?window.navigator.msSaveOrOpenBlob(e,n):(a.href=URL.createObjectURL(e),a.click(),URL.revokeObjectURL(a.href))}function P(e,t,r){let a=r.geometry,i={};Object.assign(i,a.parameters),i[e]=t;let l=function(e,t){let r=new n[e],a=Object.values(t);return r=new n[e](...a),r}(r.geometry.type,i);r.geometry.dispose(),r.geometry=l;let o=r.getObjectByName("wire");o.geometry.dispose(),o.geometry=new n.EdgesGeometry(r.geometry)}i.textures.forEach(e=>{let t=k(S,"img","imgClass");t.src=e.image,t.addEventListener("click",()=>{d.currentTexture.img=t.src;let e=document.getElementById("selectedTexture");e&&(e.style.borderColor="black",e.id="deselectedTexture"),t.style.borderColor="rgb(220, 20, 60)",t.id="selectedTexture"})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,